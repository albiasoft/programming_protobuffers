// This file is generated by rust-protobuf 2.10.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `company.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_2;

#[derive(PartialEq,Clone,Default)]
pub struct Company {
    // message fields
    pub id: u32,
    pub name: ::std::string::String,
    pub description: ::std::string::String,
    pub category: Company_CompanyCategory,
    pub employees: u32,
    pub active: bool,
    pub logo: ::std::vec::Vec<u8>,
    pub created: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Company {
    fn default() -> &'a Company {
        <Company as ::protobuf::Message>::default_instance()
    }
}

impl Company {
    pub fn new() -> Company {
        ::std::default::Default::default()
    }

    // uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string description = 3;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // .Company.CompanyCategory category = 4;


    pub fn get_category(&self) -> Company_CompanyCategory {
        self.category
    }
    pub fn clear_category(&mut self) {
        self.category = Company_CompanyCategory::AGRICULTURE;
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: Company_CompanyCategory) {
        self.category = v;
    }

    // uint32 employees = 5;


    pub fn get_employees(&self) -> u32 {
        self.employees
    }
    pub fn clear_employees(&mut self) {
        self.employees = 0;
    }

    // Param is passed by value, moved
    pub fn set_employees(&mut self, v: u32) {
        self.employees = v;
    }

    // bool active = 6;


    pub fn get_active(&self) -> bool {
        self.active
    }
    pub fn clear_active(&mut self) {
        self.active = false;
    }

    // Param is passed by value, moved
    pub fn set_active(&mut self, v: bool) {
        self.active = v;
    }

    // bytes logo = 7;


    pub fn get_logo(&self) -> &[u8] {
        &self.logo
    }
    pub fn clear_logo(&mut self) {
        self.logo.clear();
    }

    // Param is passed by value, moved
    pub fn set_logo(&mut self, v: ::std::vec::Vec<u8>) {
        self.logo = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_logo(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.logo
    }

    // Take field
    pub fn take_logo(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.logo, ::std::vec::Vec::new())
    }

    // .google.protobuf.Timestamp created = 8;


    pub fn get_created(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created(&mut self) {
        self.created.clear();
    }

    pub fn has_created(&self) -> bool {
        self.created.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created.is_none() {
            self.created.set_default();
        }
        self.created.as_mut().unwrap()
    }

    // Take field
    pub fn take_created(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for Company {
    fn is_initialized(&self) -> bool {
        for v in &self.created {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.category, 4, &mut self.unknown_fields)?
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.employees = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.active = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.logo)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if self.category != Company_CompanyCategory::AGRICULTURE {
            my_size += ::protobuf::rt::enum_size(4, self.category);
        }
        if self.employees != 0 {
            my_size += ::protobuf::rt::value_size(5, self.employees, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.active != false {
            my_size += 2;
        }
        if !self.logo.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.logo);
        }
        if let Some(ref v) = self.created.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if self.category != Company_CompanyCategory::AGRICULTURE {
            os.write_enum(4, self.category.value())?;
        }
        if self.employees != 0 {
            os.write_uint32(5, self.employees)?;
        }
        if self.active != false {
            os.write_bool(6, self.active)?;
        }
        if !self.logo.is_empty() {
            os.write_bytes(7, &self.logo)?;
        }
        if let Some(ref v) = self.created.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Company {
        Company::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "id",
                    |m: &Company| { &m.id },
                    |m: &mut Company| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Company| { &m.name },
                    |m: &mut Company| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "description",
                    |m: &Company| { &m.description },
                    |m: &mut Company| { &mut m.description },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Company_CompanyCategory>>(
                    "category",
                    |m: &Company| { &m.category },
                    |m: &mut Company| { &mut m.category },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "employees",
                    |m: &Company| { &m.employees },
                    |m: &mut Company| { &mut m.employees },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "active",
                    |m: &Company| { &m.active },
                    |m: &mut Company| { &mut m.active },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "logo",
                    |m: &Company| { &m.logo },
                    |m: &mut Company| { &mut m.logo },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created",
                    |m: &Company| { &m.created },
                    |m: &mut Company| { &mut m.created },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Company>(
                    "Company",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Company {
        static mut instance: ::protobuf::lazy::Lazy<Company> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Company,
        };
        unsafe {
            instance.get(Company::new)
        }
    }
}

impl ::protobuf::Clear for Company {
    fn clear(&mut self) {
        self.id = 0;
        self.name.clear();
        self.description.clear();
        self.category = Company_CompanyCategory::AGRICULTURE;
        self.employees = 0;
        self.active = false;
        self.logo.clear();
        self.created.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Company {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Company {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Company_CompanyCategory {
    AGRICULTURE = 0,
    ARTS = 1,
    CONSTRUCTION = 2,
    EDUCATIONAL = 3,
    FINANCE = 4,
    HIGHTECH = 5,
    LEGAL = 6,
    MANUFACTURING = 7,
    MEDICAL = 8,
    NON_PROFIT = 9,
}

impl ::protobuf::ProtobufEnum for Company_CompanyCategory {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Company_CompanyCategory> {
        match value {
            0 => ::std::option::Option::Some(Company_CompanyCategory::AGRICULTURE),
            1 => ::std::option::Option::Some(Company_CompanyCategory::ARTS),
            2 => ::std::option::Option::Some(Company_CompanyCategory::CONSTRUCTION),
            3 => ::std::option::Option::Some(Company_CompanyCategory::EDUCATIONAL),
            4 => ::std::option::Option::Some(Company_CompanyCategory::FINANCE),
            5 => ::std::option::Option::Some(Company_CompanyCategory::HIGHTECH),
            6 => ::std::option::Option::Some(Company_CompanyCategory::LEGAL),
            7 => ::std::option::Option::Some(Company_CompanyCategory::MANUFACTURING),
            8 => ::std::option::Option::Some(Company_CompanyCategory::MEDICAL),
            9 => ::std::option::Option::Some(Company_CompanyCategory::NON_PROFIT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Company_CompanyCategory] = &[
            Company_CompanyCategory::AGRICULTURE,
            Company_CompanyCategory::ARTS,
            Company_CompanyCategory::CONSTRUCTION,
            Company_CompanyCategory::EDUCATIONAL,
            Company_CompanyCategory::FINANCE,
            Company_CompanyCategory::HIGHTECH,
            Company_CompanyCategory::LEGAL,
            Company_CompanyCategory::MANUFACTURING,
            Company_CompanyCategory::MEDICAL,
            Company_CompanyCategory::NON_PROFIT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Company_CompanyCategory", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Company_CompanyCategory {
}

impl ::std::default::Default for Company_CompanyCategory {
    fn default() -> Self {
        Company_CompanyCategory::AGRICULTURE
    }
}

impl ::protobuf::reflect::ProtobufValue for Company_CompanyCategory {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rcompany.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xad\x03\n\x07\
    Company\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\x02id\x12\x12\n\x04name\x18\
    \x02\x20\x01(\tR\x04name\x12\x20\n\x0bdescription\x18\x03\x20\x01(\tR\
    \x0bdescription\x124\n\x08category\x18\x04\x20\x01(\x0e2\x18.Company.Com\
    panyCategoryR\x08category\x12\x1c\n\temployees\x18\x05\x20\x01(\rR\templ\
    oyees\x12\x16\n\x06active\x18\x06\x20\x01(\x08R\x06active\x12\x12\n\x04l\
    ogo\x18\x07\x20\x01(\x0cR\x04logo\x124\n\x07created\x18\x08\x20\x01(\x0b\
    2\x1a.google.protobuf.TimestampR\x07created\"\xa5\x01\n\x0fCompanyCatego\
    ry\x12\x0f\n\x0bAGRICULTURE\x10\0\x12\x08\n\x04ARTS\x10\x01\x12\x10\n\
    \x0cCONSTRUCTION\x10\x02\x12\x0f\n\x0bEDUCATIONAL\x10\x03\x12\x0b\n\x07F\
    INANCE\x10\x04\x12\x0c\n\x08HIGHTECH\x10\x05\x12\t\n\x05LEGAL\x10\x06\
    \x12\x11\n\rMANUFACTURING\x10\x07\x12\x0b\n\x07MEDICAL\x10\x08\x12\x0e\n\
    \nNON_PROFIT\x10\tb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
